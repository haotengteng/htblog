---
layout:     post
title:      "多场景下MySQL InnoDB存储引擎的加锁分析（未完待续）"
subtitle:   " \"多场景下MySQL InnoDB存储引擎的加锁分析   \""
date:       2018-01-01 14:45:00
author:     "Htt"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
    - mysql 数据库锁 锁机制
---
> “多场景下MySQL InnoDB存储引擎的加锁分析（未完待续） ”

## 前言

2018年第一天，花了一下午很“开心”的写了这半篇blog,都是为了团队，@领导 会给我加工资吗？（期待脸 ^-^）。
<br>
MySQL/InnoDB的加锁分析，一直是一个比较繁琐和容易产生误解的地方，特别是对于刚刚接触数据库不久的新同学，
大家依赖项目架构默认的配置之后，就会比较少去主动思考项目逻辑代码映射到数据库层面执行的细节，这样虽然方便了开发，
但是遇到数据库的层面的问题后，就会很难排查。本文主要问大家介绍MySQL/InnoDB 在MVCC协议下对数据的读写操作逻辑和加锁细节。
最重要解释：**本文参考大量网上文章，加上自己的认知理解，最终成文，文末附参考地址**。

## 正文
#### MVCC：Multi-Version Concurrent Control 多版本并发控制
MySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。
在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录

快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)
```
select * from table where ?;
```
当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。
```
select * from table where ? lock in share mode;
select * from table where ? for update;
insert into table values (…);
update table set ? where ?;
delete from table where ?;
```

所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。
执行增删改操作的流程解析：
<br>
![image](https://note.youdao.com/yws/public/resource/daad612052801c77458ee3fa5b366e20/8705EB44C70244559B661AE25DB2B2C1)
<br>
从图中，可以看到，一个Update操作的具体流程。当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。

#### Two-Phase Locking 二阶段锁
传统RDBMS加锁的一个原则，就是2PL (二阶段锁)：Two-Phase Locking。相对而言，2PL比较容易理解，说的是锁操作分为两个阶段：加锁阶段与解锁阶段，并且保证加锁阶段与解锁阶段不相交,2PL就是将加锁/解锁分为两个完全不相交的阶段。加锁阶段：只加锁，不放锁。解锁阶段：只放锁，不加锁。
#### Isolation Level 隔离级别
###### MySQL/InnoDB定义的4种隔离级别：
* Read Uncommited
可以读取未提交记录。此隔离级别，不会使用，忽略。
* Read Committed (RC)
快照读忽略，本文不考虑。（存在不可重复读与幻读）
针对当前读，RC隔离级别保证对读取到的记录加锁 (记录锁)，存在幻读现象。
* Repeatable Read (RR)
快照读忽略，本文不考虑。(同样存在幻读)
针对当前读，RR隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。
* Serializable
从MVCC并发控制退化为基于锁的并发控制。**不区别快照读与当前读，所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)**。
Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL/InnoDB下不建议使用。

#### consistent nonlocking read 一致性非锁定读
一致性非锁定读(consistent nonlocking read)是指InnoDB存储引擎通过多版本控制(multi versionning)的方式来读取当前执行时间数据库中行的数据，如果读取的行正在执行DELETE或UPDATE操作，这是读取操作不会因此等待行上锁的释放。相反的，InnoDB会去读取行的一个快照数据
<br>
![image](http://images2015.cnblogs.com/blog/754297/201602/754297-20160201105651929-2126046627.jpg)
<br>
上面展示了InnoDB存储引擎一致性的非锁定读。之所以称为非锁定读，因为不需要等待访问的行上X锁的释放

快照数据是指该行之前版本的数据，该实现是通过undo段来完成。而undo用来事务中的回滚数据，因此快照数据本身没有额外的开销，此外，读取快照数据不需要上锁，因为没有事务需要对历史数据进行修改操作

可以看到，非锁定读机制极大地提高了数据库的并发性，在InnoDB存储引擎的默认设置下，这是默认的读写方式，即读不会占用和等待表上的锁。但是在不同的事务隔离级别下，读取的方式不同，并不是每个事务隔离级别下都是采用非锁定的一致性读，此外，即使使用非锁定的一致性读，但是对于快照数据的定义也各不相同

快照其实是当前行数据之前的历史版本，每行记录可能有多个版本，如图显示，一个行记录可能有不止一个快照数据，一般称这种技术为多版本技术，因此带来的并发控制。称为多版本并发控制(Multi Version Concurrency Control,MVCC)

在事务隔离级别RC和RR下，InnoDB存储引擎引擎使用非锁定的一致性读。然而，对于快照数据的定义却不相同。在rc事务隔离级别下，对于快照数据，非一致性读总是被锁定行的最新一份快照数据.而在RR事务隔离级别下，对于快照数据，非一致性读总是读取事务开始时的行数据版本。

这正是在数据库在RR级别，快照读情况下实现可重复读的原因（当前读是通过gap锁，数据区域锁定方式实现的）；反观RC级别，由于每次读取最新版本快照，当数据在第一次读取与第二次读取期间发生变化，读取的快照版本又不一致，那么就会出现不可重复读。


### 未完待续。。。。


